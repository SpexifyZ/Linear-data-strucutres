import tkinter as tk
from tkinter import messagebox
from collections import defaultdict

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None


class MyDeque:
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0


    def __iter__(self):
        current = self.head
        while current:
            yield current.data
            current = current.next

    def isEmpty(self):
        return self.head is None

    def append(self, data):
        new_node = Node(data)
        if self.isEmpty():
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.count += 1

    def appendleft(self, data):
        new_node = Node(data)
        if self.isEmpty():
            self.head = self.tail = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node
        self.count += 1


    def pop(self):
        if self.isEmpty():
            return None
        self.count -= 1
        removed_data = self.tail.data
        if self.head == self.tail:
            self.head = self.tail = None
        else:
            self.tail = self.tail.prev
            self.tail.next = None
        return removed_data

    def popleft(self):
        if self.isEmpty():
            return None
        self.count -= 1
        removed_data = self.head.data
        if self.head == self.tail:
            self.head = self.tail = None
        else:
            self.head = self.head.next
            self.head.prev = None
        return removed_data

    def __len__(self):
        return self.count


class Patient:
    def __init__(self, id, name, dob, medical_history, medical_condition, date_of_admission):
        self.id = id
        self.name = name
        self.dob = dob
        self.medical_history = medical_history
        self.medical_condition = medical_condition 
        self.date_of_admission = date_of_admission 
        self.appointments = []
        self.doctor = None


class Doctor:
    def __init__(self, id, name):
        self.id = id
        self.name = name
        self.appointments = [] 


class Prescription:
    def __init__(self, patient_id, doctor_id, medication):
        self.patient_id = patient_id
        self.doctor_id = doctor_id
        self.medication = medication


patients = []
doctors = []
consultation_queue = MyDeque()
patient_records = {}
doctor_records = defaultdict(list)  
prescriptions = []


def password1(password):
    return password == "Password123" 


class PatientRecordGUI(tk.Tk): 

    def __init__(self):
        super().__init__()
        self.title("Patient Record Management System")
        self.geometry("800x600")

        preset_doctor = Doctor(id="D001", name="Dr. Ahmed")
        doctors.append(preset_doctor)
        doctor_records[preset_doctor.id] = [] 

        if not self.password():
            return

        self.GUI_widgets()

    def GUI_widgets(self):
        self.label_patient_id = tk.Label(self, text="Patient ID:")
        self.entry_patient_id = tk.Entry(self)


        self.label_patient_name = tk.Label(self, text="Patient Name:")
        self.entry_patient_name = tk.Entry(self)


        self.label_patient_dob = tk.Label(self, text="Date of Birth (YYYY-MM-DD):")
        self.entry_patient_dob = tk.Entry(self)


        self.label_patient_medical_history = tk.Label(self, text="Medical History:")
        self.entry_patient_medical_history = tk.Entry(self)

        self.label_update_med = tk.Label(self, text="Update Medical Condition:")
        self.label_doctor_id = tk.Label(self, text="Doctor ID:")
        self.label_medication = tk.Label(self, text="Medication:")
        self.label_patient_data = tk.Label(self, text="Search Result:")

        self.label_appointment_date = tk.Label(self, text="Appointment Date (YYYY-MM-DD):")
        self.label_appointment_date.grid(row=14, column=0, pady=5)
        self.entry_appointment_date = tk.Entry(self)
        self.entry_appointment_date.grid(row=14, column=2, padx=5)

        self.entry_patient_id = tk.Entry(self)
        self.entry_update_med = tk.Entry(self)
        self.entry_doctor_id = tk.Entry(self)
        self.entry_medication = tk.Entry(self)

        self.text_patient_data = tk.Text(self, width=50, height=10, state=tk.DISABLED)
        self.text_patient_data.grid(row=9, columnspan=2, padx=5)

        self.button_add_patient = tk.Button(self, text="Add Patient", command=self.add_patientrecord)
        self.button_update_patient = tk.Button(self, text="Update Patient", command=self.update_patientrecord)
        self.button_remove_patient = tk.Button(self, text="Remove Patient", command=self.remove_patientrecord)
        self.button_book_appointment = tk.Button(self, text="Book Appointment",
                                                     command=self.book_appointment)
        self.button_describe_prescription = tk.Button(self, text="Describe Prescription", command=self.describe_prescription)
        self.button_findpatient = tk.Button(self, text="Find Patient", command=self.findpatient)

        self.button_process_current_patient = tk.Button(self, text="Process Current Patient",
                                                     command=self.process_current_patient)
        self.button_process_current_patient.grid(row=14, column=1, pady=5)




        self.label_medical_condition = tk.Label(self, text="Medical Condition:")
        self.label_medical_condition.grid(row=4, column=0, pady=5)
        self.entry_medical_condition = tk.Entry(self)
        self.entry_medical_condition.grid(row=4, column=1, padx=5)

        self.label_date_of_admission = tk.Label(self, text="Date of Admission (YYYY-MM-DD):")
        self.label_date_of_admission.grid(row=5, column=0, pady=5)
        self.entry_date_of_admission = tk.Entry(self)
        self.entry_date_of_admission.grid(row=5, column=1, padx=5)

        self.label_patient_id.grid(row=0, column=0, pady=5)
        self.entry_patient_id.grid(row=0, column=1, padx=5)

        self.label_patient_name.grid(row=1, column=0, pady=5)
        self.entry_patient_name.grid(row=1, column=1, padx=5)

        self.label_patient_dob.grid(row=2, column=0, pady=5)
        self.entry_patient_dob.grid(row=2, column=1, padx=5)

        self.label_patient_medical_history.grid(row=3, column=0, pady=5)
        self.entry_patient_medical_history.grid(row=3, column=1, padx=5)

        self.label_medical_condition.grid(row=4, column=0, pady=5)
        self.entry_medical_condition.grid(row=4, column=1, padx=5)

        self.label_date_of_admission.grid(row=5, column=0, pady=5)
        self.entry_date_of_admission.grid(row=5, column=1, padx=5)

        self.button_add_patient.grid(row=6, column=1, pady=5)

        self.button_remove_patient.grid(row=6, column=2, pady=5)

        self.label_update_med.grid(row=7, column=0, pady=5)
        self.entry_update_med.grid(row=7, column=1, padx=5)

        
        self.button_update_patient.grid(row=8, column=1, pady=5)

        self.label_doctor_id.grid(row=9, column=0, pady=5)
        self.entry_doctor_id.grid(row=9, column=1, padx=5)

        self.label_appointment_date.grid(row=10, column=0, pady=5)
        self.entry_appointment_date.grid(row=10, column=1, padx=5)

        
        self.button_book_appointment.grid(row=11, column=1, pady=5)

        
        self.label_medication.grid(row=12, column=0, pady=5)
        self.entry_medication.grid(row=12, column=1, padx=5)

        self.button_describe_prescription.grid(row=13, column=1, pady=5)

        self.button_findpatient.grid(row=14, column=1, pady=5)
        self.button_findpatient = tk.Button(self, text="Find Patient", command=self.findpatient)
        self.button_findpatient.grid(row=15, column=1, pady=5)

        self.label_patient_data.grid(row=15, column=0, pady=5)
        self.text_patient_data.grid(row=16, column=0, columnspan=2, padx=5, pady=5)

        self.label_consultation_queue = tk.Label(self, text="Consultation Queue:")
        self.label_consultation_queue.grid(row=15, column=0, pady=5) 
        self.listbox_consultation_queue = tk.Listbox(self, height=10, width=50)
        self.listbox_consultation_queue.grid(row=15, column=1, columnspan=2, padx=5, sticky="ew")
        self.label_consultation_queue.grid(row=17, column=0, pady=5)
        self.listbox_consultation_queue.grid(row=18, column=0, columnspan=2, padx=5, sticky="ew")

        self.button_process_current_patient = tk.Button(self, text="Process Current Patient",
                                                        command=self.process_current_patient)
        self.button_process_current_patient.grid(row=14, column=1, pady=5) 

def password(self):
        password_window = tk.Toplevel(self)
        password_window.title("Enter Password")
        password_window.geometry("200x100")

        password_label = tk.Label(password_window, text="Password:")
        password_label.pack(pady=5)

        password_entry = tk.Entry(password_window, show="*")
        password_entry.pack(pady=5)

        def check_pass(event=None):
            entered_password = password_entry.get()
            if password1(entered_password):
                password_window.destroy()
                self.GUI_widgets()
            else:
                messagebox.showerror("Error", "Invalid password!")

        password_window.bind("<Return>", check_pass)
        button_check = tk.Button(password_window, text="Check", command=check_pass)
        button_check.pack(pady=5)

        password_window.mainloop()
        return True

    def add_patientrecord(self):
        patient_id = self.entry_patient_id.get()
        name = self.entry_patient_name.get()
        dob = self.entry_patient_dob.get()
        medical_history = self.entry_patient_medical_history.get()
        medical_condition = self.entry_medical_condition.get()  
        date_of_admission = self.entry_date_of_admission.get()  

        if patient_id and name and dob and medical_history and medical_condition and date_of_admission:
            new_patient = Patient(patient_id, name, dob, medical_history, medical_condition, date_of_admission)
            patients.append(new_patient)
            patient_records[patient_id] = new_patient
            messagebox.showinfo("Success!", "Patient record has been added.")
        else:
            messagebox.showerror("Error", "Please fill in all fields.")

    def update_patientrecord(self):
        patient_id = self.entry_patient_id.get()
        update_med = self.entry_update_med.get()  
        if patient_id in patient_records:
            patient_records[patient_id].medical_history = update_med
            messagebox.showinfo("Success!", "Patient record has been updated.")
        else:
            messagebox.showerror("Error", "Patient not found.")

    def remove_patientrecord(self):
        patient_id = self.entry_patient_id.get()
        if patient_id in patient_records:
            del patient_records[patient_id]
            messagebox.showinfo("Success!", "Patient record has been removed.")
        else:
            messagebox.showerror("Error", "Patient not found.")

    def book_appointment(self):
        patient_id = self.entry_patient_id.get()
        doctor_id = self.entry_doctor_id.get()
        appointment_date = self.get_appointment_date() 

        if patient_id in patient_records and doctor_id in doctor_records:
            if self.available_appointments(doctor_id, appointment_date):
    
                appointment = (patient_id, doctor_id, appointment_date)
                patient_records[patient_id].appointments.append(appointment)
                doctor_records[doctor_id].append(appointment)
                
                consultation_queue.append(patient_id)
                self.update_consultation_display()
                messagebox.showinfo("Success!", "Appointment Booked and patient has been added to the queue.")
            else:
                messagebox.showerror("Error", "Doctor unavailable on selected date.")
        else:
            messagebox.showerror("Error", "Invalid patient or doctor ID.")

    def process_current_patient(self):
        if not consultation_queue.isEmpty():
            patient_id = consultation_queue.popleft()  
            self.update_consultation_display()  
   
        else:
            messagebox.showerror("Error", "There are no patients in the queue.")

    def update_consultation_display(self):
        self.listbox_consultation_queue.delete(0, tk.END) 

        for index, patient_id in enumerate(consultation_queue):
            
            if patient_id in patient_records:
                patient_name = patient_records[patient_id].name
                display_text = f"{patient_id} - {patient_name}"
            else:
                display_text = f"{patient_id} - Name not found"

            
            if index == 0:  
                display_text = "First: " + display_text
            elif index == len(consultation_queue) - 1:  
                display_text = "Last: " + display_text

            self.listbox_consultation_queue.insert(tk.END, display_text)

    def get_appointment_date(self):
        return self.entry_appointment_date.get()
    def describe_prescription(self):
        patient_id = self.entry_patient_id.get()
        doctor_id = self.entry_doctor_id.get()
        medication = self.entry_medication.get()
        if patient_id in patient_records and doctor_id and medication:
            
            messagebox.showinfo("Success", "Prescription described.")
        else:
            messagebox.showerror("Error", "Invalid input.")

    def available_appointments(self, doctor_id, appointment_date):

        
        if doctor_id not in doctor_records:
            messagebox.showerror("Error", "Doctor ID not found.")
            return False

      
        for appointment in doctor_records[doctor_id]:
            if appointment[2] == appointment_date:  
                messagebox.showerror("Error", f"Doctor is not available on {appointment_date}.")
                return False

        
        return True

    def describe_prescription(self):
        
        patient_id = self.entry_patient_id.get().strip()
        doctor_id = self.entry_doctor_id.get().strip()
        medication = self.entry_medication.get().strip()

        
        if patient_id in patient_records:
            new_prescription = Prescription(patient_id, doctor_id, medication)
            prescriptions.append(new_prescription)
            messagebox.showinfo("Success", "Prescription described to " + patient_records[patient_id].name)
        else:
            messagebox.showerror("Error", "Patient ID not found.")

    def findpatient(self):
        patient_id = self.entry_patient_id.get().strip() 
        if patient_id in patient_records:
            patient = patient_records[patient_id]
            medications = [prescription.medication for prescription in prescriptions if
                           prescription.patient_id == patient_id]

            medications_str = ", ".join(medications) if medications else "No medications found"

            
            patient_data = (f"Patient ID: {patient.id}\n"
                             f"Name: {patient.name}\n"
                             f"Date of Birth: {patient.dob}\n"
                             f"Medical History: {patient.medical_history}\n"
                             f"Medical Condition: {patient.medical_condition}\n"
                             f"Date of Admission: {patient.date_of_admission}\n"
                             f"Medications: {medications_str}")
            self.text_patient_data.config(state=tk.NORMAL)
            self.text_patient_data.delete(1.0, tk.END)
            self.text_patient_data.insert(tk.END, patient_data)
            self.text_patient_data.config(state=tk.DISABLED)
        else:
            messagebox.showerror("Error", "Patient not found.")

    def sort_patients(self):
        
        sort_option = self.get_sort_option()  
        if sort_option == "id":
            sorted_patients = sorted(patients, key=lambda p: p.id)
        elif sort_option == "name":
            sorted_patients = sorted(patients, key=lambda p: p.name)
        
        elif sort_option == "admission_date":
            sorted_patients = sorted(patients, key=lambda p: p.admission_date)
        
        else:
            print("Invalid sort option.")
            return

        
        for i, patient in enumerate(sorted_patients):
            patient_records[patient.id] = patient

        print("Patients sorted successfully.")

    def get_sort_option(self):
        return "id"

    def create_menu(self):
        menu_bar = tk.Menu(self)

        
        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="Exit", command=self.quit)
        menu_bar.add_cascade(label="File", menu=file_menu)

        
        patient_menu = tk.Menu(menu_bar, tearoff=0)
        patient_menu.add_command(label="Add Patient Record", command=self.add_patientrecord)
        patient_menu.add_command(label="Update Patient Record", command=self.update_patientrecord)
        patient_menu.add_command(label="Remove Patient Record", command=self.remove_patientrecord)
        patient_menu.add_command(label="Search Patient", command=self.findpatient)
        patient_menu.add_command(label="Sort Patients", command=self.sort_patients)
        menu_bar.add_cascade(label="Patient Management", menu=patient_menu)

        
        appointment_menu = tk.Menu(menu_bar, tearoff=0)
        appointment_menu.add_command(label="Book Appointment", command=self.book_appointment)
        menu_bar.add_cascade(label="Appointment Management", menu=appointment_menu)

        
        prescription_menu = tk.Menu(menu_bar, tearoff=0)
        prescription_menu.add_command(label="Describe Prescription", command=self.describe_prescription)
        menu_bar.add_cascade(label="Prescription Management", menu=prescription_menu)

        self.config(menu=menu_bar)

    def main(self):
        self.create_menu()  
        self.mainloop()


if __name__ == "__main__":
    app = PatientRecordGUI()
    app.main()
